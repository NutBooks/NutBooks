definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.AddBookmarkRequest:
    properties:
      link:
        example: https://cheesecat47.github.io
        type: string
      title:
        minLength: 1
        type: string
      user_id:
        minimum: 1
        type: integer
    required:
    - link
    - user_id
    type: object
  models.AddBookmarkResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.AddUserRequest:
    properties:
      email:
        example: ""
        maxLength: 50
        minLength: 5
        type: string
      name:
        example: ""
        maxLength: 50
        minLength: 1
        type: string
    required:
    - email
    - name
    type: object
  models.AddUserResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.Bookmark:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      link:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.GetAllBookmarksResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetAllUsersResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetBookmarkByIdResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetUserByIdResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.LogInResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.User:
    properties:
      Authority:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/:
    get:
      responses:
        "200":
          description: OK
      summary: Root URL - for health check
      tags:
      - /
  /api/v1/auth/login/:
    post:
      description: 비밀번호는 영문 + 숫자 8-12자리
      parameters:
      - example: ""
        in: formData
        maxLength: 50
        minLength: 5
        name: email
        required: true
        type: string
      - example: 비밀번호는 영문 + 숫자 8-12자리
        in: formData
        maxLength: 12
        minLength: 8
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LogInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.LogInResponse'
      summary: 로그인 API
      tags:
      - auth
  /api/v1/bookmark/:
    get:
      parameters:
      - description: limit과 offset은 같이 입력해야 합니다
        in: query
        name: offset
        type: integer
      - description: limit과 offset은 같이 입력해야 합니다
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GetAllBookmarksResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Bookmark'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetAllBookmarksResponse'
      summary: offset부터 limit까지 북마크 목록을 반환
      tags:
      - bookmark
    post:
      consumes:
      - application/json
      description: 새 북마크를 DB에 저장. 북마크 링크는 필수 데이터이고, 그 외는 옵셔널.
      parameters:
      - description: body params
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/models.AddBookmarkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.AddBookmarkResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Bookmark'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AddBookmarkResponse'
      summary: 북마크를 DB에 추가하는 API
      tags:
      - bookmark
  /api/v1/bookmark/{id}/:
    get:
      parameters:
      - description: Bookmark ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GetBookmarkByIdResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Bookmark'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetBookmarkByIdResponse'
      summary: ID를 사용해 북마크 1개 정보 읽기
      tags:
      - bookmark
  /api/v1/user/:
    get:
      parameters:
      - description: limit과 offset은 같이 입력해야 합니다.
        in: query
        name: offset
        type: integer
      - description: limit과 offset은 같이 입력해야 합니다.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GetAllUsersResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetAllUsersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetAllUsersResponse'
      summary: 모든 유저 목록 반환
      tags:
      - user
    post:
      parameters:
      - description: body params
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/models.AddUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.AddUserResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AddUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AddUserResponse'
      summary: 새 유저를 추가하는 API
      tags:
      - user
  /api/v1/user/{id}/:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GetUserByIdResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetUserByIdResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AddUserResponse'
      summary: UserID를 사용해 유저 1명 정보 읽기
      tags:
      - user
swagger: "2.0"
