basePath: /api/v1
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.AddBookmarkRequest:
    properties:
      email:
        description: |-
          5~50자 길이. 자세한 형식은 [go-playground/validator] 참고

          [go-playground/validator]: https://github.com/go-playground/validator
        maxLength: 50
        minLength: 5
        type: string
      link:
        description: |-
          북마크(웹사이트) 링크. 자세한 형식은 [go-playground/validator] 참고

          [go-playground/validator]: https://github.com/go-playground/validator
        example: https://cheesecat47.github.io
        type: string
      title:
        description: 북마크 제목. 공백이면 og:title로 대체
        type: string
    required:
    - email
    - link
    type: object
  models.AddBookmarkResponse:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/models.Bookmark'
        description: 생성된 북마크 정보
      error:
        type: boolean
      message:
        type: string
    type: object
  models.AddBookmarkWithErrorResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.AddUserRequest:
    properties:
      email:
        description: |-
          5~50자 길이. 자세한 형식은 [go-playground/validator] 참고

          [go-playground/validator]: https://github.com/go-playground/validator
        example: cheesecat47@gmail.com
        maxLength: 50
        minLength: 5
        type: string
      name:
        description: 알파벳, 숫자, 유니코드 문자 사용 가능
        maxLength: 50
        minLength: 1
        type: string
      password:
        description: 영문 + 숫자 8-12자리
        example: qwerty123
        maxLength: 12
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.AddUserResponse:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/models.User'
        description: 생성된 유저 정보
      error:
        type: boolean
      message:
        type: string
    type: object
  models.AddUserWithErrorResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.Authentication:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        description: |-
          5~50자 길이. 자세한 형식은 [go-playground/validator] 참고

          [go-playground/validator]: https://github.com/go-playground/validator
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.Bookmark:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      link:
        description: |-
          북마크(웹사이트) 링크. 자세한 형식은 [go-playground/validator] 참고

          [go-playground/validator]: https://github.com/go-playground/validator
        type: string
      title:
        description: 북마크 제목. 공백이면 og:title로 대체
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.CheckEmailDuplicateResponse:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/models.Authentication'
        description: 생성된 인증 정보
      error:
        type: boolean
      message:
        type: string
    type: object
  models.CheckEmailDuplicateWithErrorResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetAllBookmarksResponse:
    properties:
      data:
        properties:
          data:
            description: 북마크 정보 배열
            items:
              $ref: '#/definitions/models.Bookmark'
            type: array
          size:
            description: 북마크 배열 길이
            type: integer
        type: object
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetAllBookmarksWithErrorResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetAllUsersResponse:
    properties:
      data:
        properties:
          data:
            description: 유저 정보 배열
            items:
              $ref: '#/definitions/models.User'
            type: array
          size:
            description: 유저 배열 길이
            type: integer
        type: object
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetAllUsersWithErrorResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetBookmarkByIdResponse:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/models.Bookmark'
        description: ID가 일치하는 북마크 정보
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetBookmarkByIdWithErrorResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetUserByIdResponse:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/models.User'
        description: ID가 일치하는 유저 정보
      error:
        type: boolean
      message:
        type: string
    type: object
  models.GetUserByIdWithErrorResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.LogInRequest:
    properties:
      email:
        description: |-
          5~50자 길이. 자세한 형식은 [go-playground/validator] 참고

          [go-playground/validator]: https://github.com/go-playground/validator
        example: cheesecat47@gmail.com
        maxLength: 50
        minLength: 5
        type: string
      password:
        description: 영문 + 숫자 8-12자리
        example: qwerty123
        maxLength: 12
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.LogInResponse:
    properties:
      data:
        description: 로그인 성공 시 토큰 반환
        properties:
          access_token:
            type: string
        type: object
      error:
        type: boolean
      message:
        type: string
    type: object
  models.LogInWithErrorResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.User:
    properties:
      Authority:
        description: |-
          사용자 권한
           - [AuthorityNone]
           - [AuthorityAdmin]
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        description: 알파벳, 숫자, 유니코드 문자 사용 가능
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact:
    email: cheesecat47@gmail.com
  description: Nutbooks API documentation
  title: NutBooks API
  version: 1.0.0
paths:
  /:
    get:
      responses:
        "200":
          description: OK
      summary: Root URL - for health check
      tags:
      - /
  /auth/login:
    post:
      description: |-
        로그인 성공 시 200 "Success" 메시지와 함께 Data로 AccessToken을 반환.
        이메일 문제 시 400 "Email not found", 비밀번호 문제 시 "Failed to login" 반환.
        로그인 중 서버 문제 발생 시 "Failed to check ***" 반환.
      parameters:
      - description: 비밀번호는 영문 + 숫자 8-12자리
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/models.LogInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LogInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.LogInWithErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.LogInWithErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.LogInWithErrorResponse'
      summary: 로그인 API
      tags:
      - auth
  /bookmark:
    get:
      parameters:
      - description: 현재 유저 이메일
        in: header
        name: email
        required: true
        type: string
      - description: 특정 id부터 조회할 때 사용
        in: query
        name: offset
        type: integer
      - description: limit 개수만큼 조회할 때 사용
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllBookmarksResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetAllBookmarksWithErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GetAllBookmarksWithErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetAllBookmarksWithErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 특정 유저가 저장한 북마크 중 offset부터 limit까지 목록을 반환
      tags:
      - bookmark
    post:
      consumes:
      - application/json
      description: 새 북마크를 DB에 저장. 북마크 링크는 필수 데이터이고, 그 외는 옵셔널.
      parameters:
      - description: 현재 유저 이메일
        in: header
        name: email
        required: true
        type: string
      - description: body params
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/models.AddBookmarkRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AddBookmarkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AddBookmarkWithErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AddBookmarkWithErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 특정 유저가 북마크를 DB에 추가하는 API
      tags:
      - bookmark
  /bookmark/{id}:
    get:
      parameters:
      - description: 현재 유저 이메일
        in: header
        name: email
        required: true
        type: string
      - description: Bookmark ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetBookmarkByIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetBookmarkByIdWithErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GetBookmarkByIdWithErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetBookmarkByIdWithErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 특정 유저가 저장한 북마크 중 id가 일치하는 북마크 상세 정보 1개를 반환
      tags:
      - bookmark
  /user:
    get:
      parameters:
      - description: 현재 유저 이메일
        in: header
        name: Email
        required: true
        type: string
      - description: 특정 id부터 조회할 때 사용
        in: query
        name: offset
        type: integer
      - description: limit 개수만큼 조회할 때 사용
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetAllUsersWithErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GetAllUsersWithErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetAllUsersWithErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 모든 유저 목록 반환
      tags:
      - user
    post:
      consumes:
      - application/json
      parameters:
      - description: 비밀번호는 영문 + 숫자 8-12자리
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/models.AddUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AddUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AddUserWithErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AddUserWithErrorResponse'
      summary: 새 유저 추가
      tags:
      - user
  /user/{id}:
    get:
      parameters:
      - description: 현재 유저 이메일
        in: header
        name: email
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserByIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GetUserByIdWithErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GetUserByIdWithErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GetUserByIdWithErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: UserID를 사용해 유저 1명 정보 읽기
      tags:
      - user
  /user/check-email:
    get:
      description: 입력한 이메일을 사용하는 유저가 있다면 Body의 Message로 True 반환, 없다면 False 반환.
      parameters:
      - description: 중복 체크 할 이메일 주소 입력. 최대 길이 50자 제한.
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CheckEmailDuplicateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.CheckEmailDuplicateWithErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.CheckEmailDuplicateWithErrorResponse'
      summary: 이메일 중복 체크.
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: AccessToken
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
